
一： 编写Eureka Ribbon Client:

    1.在POM文件中引入依赖：
                    <dependency>
            			<groupId>org.springframework.cloud</groupId>
            			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
            		</dependency>

            		<dependency>
            			<groupId>org.springframework.cloud</groupId>
            			<artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
            		</dependency>
            		<dependency>
            			<groupId>org.springframework.boot</groupId>
            			<artifactId>spring-boot-starter-web</artifactId>
            		</dependency>

            		<dependency>
            			<groupId>org.springframework.boot</groupId>
            			<artifactId>spring-boot-starter-test</artifactId>
            			<scope>test</scope>
            		</dependency>

            		<dependency>
            			<groupId>org.springframework.boot</groupId>
            			<artifactId>spring-boot-starter-actuator</artifactId>
            		</dependency>

    2. 配置application.yml
        spring:
          application:
            name: eureka-ribbon-client

        server:
          port: 8764

        eureka:
          client:
            service-url:
              defaultZone: http://localhost:8761/eureka/

    3. 在EurekaRibbonClientApplication上增加@EnableEurekaClient开启 Eureka Client的功能。
        在日志中看到： DiscoveryClient_EUREKA-CLIENT/localhost:eureka-ribbon-client:8764 - registration status: 204 代表服务注册成功。

    4. 新建一个RibbonConfig加上@Configuration注解，标识此类为配置类。 见代码com.forezp.config.RibbonConfig类。
        在此类中为IoC 容器中注入一个RestTemplate 的Bean ， 并在这个Bean 上加上@LoadBalanced 注解，此时RestTemplate 就结合了
        Ribbon 开启了负载均衡功能。

    5. 写一个RibbonService类加上@Service注解，在该类的hi()方法用restTemplate调用eureka-client的API接口。
       restTemplate中的Uri不需要使用硬编码（比如IP），只需要写服务名eureka-client即可程序会根据服务名称 eureka-client到Eureka-server注册中心去自动获取IP和端口信息。

    6. 写一个RibbonController类，为该类加上＠RestController 注解，开启RestController 的功能，写一个"/hi" Get 方法的接口，调用RibbonService 类的hi（）方法。

    7. 启动eureka-server 见改项目的 总结.txt 说明, 2个eureka-client 见改项目的 总结.txt 说明。 (如果这两个服务已经启动了，不要再重复此步骤)

    8. 启动Eureka-ribbon-client服务。

    9. 在浏览器上访问Eureka Server主界面： http://localhost:8761/
        在Instances currently registered with Eureka 中看到：
        EUREKA-CLIENT	n/a (2)	(2)	UP (2) - localhost:eureka-client:8763 , localhost:eureka-client:8762
        EUREKA-RIBBON-CLIENT	n/a (1)	(1)	UP (1) - localhost:eureka-ribbon-client:8764

        代表Eureka-client与Eureka-ribbon-clinet服务已经启动成功。

    6.在浏览器上访问http://localhost:8764/hi?name=forezp， 浏览器会  轮流  显示如下信息：
        hi forezp,i am from port:8762
        hi forezp,i am from port:8763


二. LoadBalancerClient 简介与演示

    1.介绍： 负载均衡器的核心类为LoadBal ancerClient, LoadBalancerCiient 可以获取负载均衡的服务提供者的实例信息。

    2.在RibbonController类中写一个接口"/testRibbon"， 通过LoadBalancerClient 去选择一个eureka-client 的服务实例的信息， 并将该信息返回。

    3.重新启动工程， 在浏览器上多次访问h句：／／localhost:87 64/testRibbon ， 浏览器会轮流显示如下内容：
        localhost:8762
        localhost:8763

    4.本示例只演示负载均衡器LoadBalancerClient 是从Eureka Client 获取服务注册列表信息的，并将服务注册列表信息缓存了一份。
      在LoadBalancerCJient 调用choose（）方法时，根据负载均衡策略选择一个服务实例的信息，从而进行了负载均衡。

      注意： eureka client从eureka server获取注册列表信息，LoadBalancerClient从本地的eureka client获取注册列表。

      LoadBalancerClient 也可以不从Eureka Client 获取注册列表信息，这时需要自己维护一份服务注册列表信息。示例代码请见chapter6-4 project 的 ribbon-clinet module。
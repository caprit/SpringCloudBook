本Project演示Config Server从从远程Git仓库读取配置文件：
    Config Server 可以不从本地的仓库读取，而是从远程Git 仓库读取。这样做的好处就是将配置统一管理，并且可以通过
    Spring Cloud Bus 在不人工启动程序的情况下对Config Client 的配置进行刷新。


一、 构建Config Server
        1. 在Config-server工程pom.xml文件增加如下引用：（父POM文件自己注意查看）
                    <dependency>
            			<groupId>org.springframework.cloud</groupId>
            			<artifactId>spring-cloud-config-server</artifactId>
            		</dependency>
        2. 在ConfigServerApplication类上新增@EnableConfigServer注解，开启config server功能。
        3. 配置application.yml文件
            server:
              port: 8769
            spring:
              cloud:
                config:
                  server:
                    git:
                      uri: https://github.com/forezp/SpringcloudConfig
                      searchPaths: respo
                      username:
                      password:
                  label: master
              application:
                name: config-server

            #配置说明：
            #1. spring.cloud.config.server.git.url配置git仓库地址
            #2. spring.cloud.config.server.git.searchPaths配置搜索远程仓库的文件夹地址
            #3. spring.cloud.config.server.git.username配置git仓库的登录名
            #4. spring.cloud.config.server.git.password配置git仓库的密码 (公开的Git仓库不需要用户名、密码；私人Git仓库需要)
            #5. spring.cloud.config.label为git仓库的分支名，本例从master读取。

        4. 将resource/shared目录中的config-client-dev.yml文件上传到https://github.com/forezp/SpringcloudConfig/respo目录。
        5. 重新启动config-server。

二、 构建Config client
        1.在config-client工程的pom.xml文件中新增如下引用： （父POM文件自己注意查看）
                    <dependency>
            			<groupId>org.springframework.boot</groupId>
            			<artifactId>spring-boot-starter-web</artifactId>
            		</dependency>

            		<dependency>
            			<groupId>org.springframework.cloud</groupId>
            			<artifactId>spring-cloud-starter-config</artifactId>
            		</dependency>

        2.在config-client的配置文件bootstrap.yml中做配置。【 注意： bootstrap.yml相对于appliation具有优先的执行顺序。】
            spring:
              application:
                name: config-client
              cloud:
                config:
                  uri: http://localhost:8769
                  fail-fast: true
              profiles:
                active: dev

            server:
              port: 8762

             #配置说明：
             # spring.cloud.config.url 指定configServer的访问url
             # spring.cloud.config.fail-fast 表示如果没有读取成功，则执行快速失败
             # sprisng.profiles.active表示读取dev环境的配置文件

        3.在ConfigClientApplication类中写一个API接口，读取配置文件foo变量，并通过API返回。
        4.启动config-server工程，启动config-client工程。启动config-client工程会在控制台的日志中发现config-client向url为
          http://localhost:8769的Config Server读取了配置文件。

          日志内容如： Fetching config from server at : http://localhost:8769

        5. 访问http://localhost:8762/foo，浏览器显示：
            foo version 2




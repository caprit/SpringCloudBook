本Project演示使用Spring Cloud Bus刷新配置：
    Spring Cloud Bus 是用轻量的消息代理将分布式的节点连接起来，可以用于广播配置文件的更改或者服务的监控管理。）个关键的思想就是，
    消息总线可以为微服务做监控，也可以实现应用程序之间相通信。Spring Cloud Bus 可选的消息代理组建包括RabbitMQ 、AMQP 和
    Kafka 等。本节讲述的是用RabbitMQ 作为Spring Cloud 的消息组件去刷新更改微服务的配置文件。

    为什么需要用Spring Cloud Bus 去刷新配置呢？
    如果有几十个微服务，而每一个服务又是多实例，当更改配置时，需要重新启动多个微服务实例，会非常麻烦。Spring Cloud Bus 的一个功能
    就是让这个过程变得简单，当远程Git 仓库的配置更改后，只需要向某一个微服务实例发送一个Post 请求，通过消息组件通知其他微服务实例重新
    拉取配置文件。当远程Git 仓库的配置更改后，通过发送“ /bus/refresh ” Post 请求给某一个微服务实例，通过消息组件，通知其他微服务实例，更新配置文件。

    步骤一构建Eureka Server和步骤二构建Config Server步骤不需要改变。只需要改变步骤三 构建Eureka-Client。

一、 构建Eureka Server
        1. 在eureka-server工程pom.xml文件增加如下引用：（父POM文件自己注意查看）
                   <dependency>
                        <groupId>org.springframework.cloud</groupId>
                        <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
                    </dependency>
                    <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-web</artifactId>
                    </dependency>
        2. 在EurekaServerApplication类上新增@EnableEurekaServer注解，开启 eureka server功能。
        3. 配置application.yml文件
            server:
              port: 8761
            eureka:
              client:
                register-with-eureka: false
                fetch-registry: false
                serviceUrl:
                  defaultZone: http://localhost:${server.port}/eureka/

            #配置说明：
            #1. eureka.client.register-with-eureka: flase 和 eureka.client.fetch-registry: flase 关闭eureka-server的自注册
            #2. eureka.client.serviceUrl.defaultZone表示eureka-server的http访问地址

二、 构建Config Server
        1. 在Config-server工程pom.xml文件增加如下引用：（父POM文件自己注意查看）
                    <dependency>
            			<groupId>org.springframework.cloud</groupId>
            			<artifactId>spring-cloud-config-server</artifactId>
            		</dependency>
            		<dependency>
                        <groupId>org.springframework.cloud</groupId>
                        <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
                    </dependency>

        2. 在ConfigServerApplication类上新增@EnableConfigServer注解，开启config server功能。新增@EnableEurekaClient注解，开启
            EurekaClient功能。
        3. 配置application.yml文件
            server:
              port: 8769
            spring:
              cloud:
                config:
                  server:
                    git:
                      uri: https://github.com/forezp/SpringcloudConfig
                      searchPaths: respo
                      username:
                      password:
                  label: master
              application:
                name: config-server

            eureka:
              client:
                serviceUrl:
                  defaultZone: http://localhost:8761/eureka/

            #配置说明：
            #1. spring.cloud.config.server.git.url配置git仓库地址
            #2. spring.cloud.config.server.git.searchPaths配置搜索远程仓库的文件夹地址
            #3. spring.cloud.config.server.git.username配置git仓库的登录名
            #4. spring.cloud.config.server.git.password配置git仓库的密码 (公开的Git仓库不需要用户名、密码；私人Git仓库需要)
            #5. spring.cloud.config.label为git仓库的分支名，本例从master读取。
            #6. eureka开头的配置，用于指定eureka-server的访问URL。

        4. 重新启动config-server。

三、 构建Config client
        1.在config-client工程的pom.xml文件中新增如下引用： （父POM文件自己注意查看）
                    <dependency>
            			<groupId>org.springframework.boot</groupId>
            			<artifactId>spring-boot-starter-web</artifactId>
            		</dependency>

            		<dependency>
            			<groupId>org.springframework.cloud</groupId>
            			<artifactId>spring-cloud-starter-config</artifactId>
            		</dependency>

            		<dependency>
                        <groupId>org.springframework.cloud</groupId>
                        <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
                    </dependency>

                    <dependency>
                        <groupId>org.springframework.cloud</groupId>
                        <artifactId>spring-cloud-starter-bus-amqp</artifactId>
                    </dependency>

                    <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-actuator</artifactId>
                    </dependency>

        2.在ConfigClientApplication类新增@EnableEurekaClient注解，开启EurekaClient功能。新增@RefreshScope注解，只有加上了该注解，才会在不重启服务的情况下更新配置，如本例中更新配置文件foo 变量的值。

        2.在config-client的配置文件bootstrap.yml中做配置。【 注意： bootstrap.yml相对于appliation具有优先的执行顺序。】
            spring:
              application:
                name: config-client
              cloud:
                config:
                  fail-fast: true
                  discovery:
                    enabled: true
                    serviceId: config-server
                bus:
                  enabled: true
                  trace:
                    enabled: true

              profiles:
                active: dev

              rabbitmq:
                  host: localhost
                  port: 5672
                  username: guest
                  password: guest
                  publisher-confirms: true
                  virtual-host: /

            eureka:
              client:
                serviceUrl:
                  defaultZone: http://localhost:8761/eureka/

            management:
              endpoints:
                web:
                  exposure:
                    include: bus-refresh
            server:
              port: 8762


             #配置说明：
             # spring.cloud.config.discovery.enabled: true 代表开启到eureka服务注册与发现中心查找服务
             # spring.cloud.config.discovery.enabled.serviceId: config-server 表示到eureka服务注册与发现中心查找名字为config-server的服务
             # spring.cloud.bus.enabled: true 开启spring  cloud bus 服务
             # spring.cloud.bus.trace.enabled: true 必须设置
             # spring.cloud.config.fail-fast 表示如果没有读取成功，则执行快速失败
             # spring.profiles.active表示读取dev环境的配置文件
             # eureka开头的配置表示访问eureka server的http 地址。
             # rabbitmq开头的属性配置RabbitMQ的相关配置：
                    rabbitmq.host 配置RabbitMQ的IP地址
                    rabbitmq.port 配置RabbitMQ的端口
                    rabbitmq.username 配置RabbitMQ的用户名
                    rabbitmq.password 配置RabbitMQ的密码
            # management.endpoints.web.exposure.include： bus-refresh 必须设置，才能在postman中访问bus-refresh PATH


        3.在ConfigClientApplication类中写一个API接口，读取配置文件foo变量，并通过API返回。
        4.启动eureka-server，config-server工程,config-client。其中config-client开启两个实例，端口分别为8762和8763.
                 如何IDEA中，同一个微服务以多个端口启动的配置：
                   IDEA->Edit Configuration->Spring Boot->点击+号新增一个Spring Boot启动项目，
                   Name设置为ConfigClientApplication-8763
                   Main Classe: 设置为 com.forezp.ConfigClientApplication
                   Program arguments: --server.port=8763
                   Use classpath of module: config-client
                   JRE: Default(1.8 - SDK of 'eureka-client' module)
                   点击Apply 和 OK。

        5. 启动完成后，在浏览器上访问http://localhost:8762/foo 或者http://localhost:8763/foo
            foo version 2
        6. 更改远程Git仓库，将foo的值改为 foo version 1。
        7. 通过postman工具发送post请求到： http://localhost:8762/actuator/bus-refresh成功后，可以看到控制台又会重新输出如下日志：
                Fetching config from server at : http://localhost:8769/
                2019-01-30 17:02:14.762  INFO 18136 --- [nio-8762-exec-5] c.c.c.ConfigServicePropertySourceLocator : Located environment: name=config-client, profiles=[dev], label=null, version=00d32612a38898781bce791a4a845e60a7fbdb4e, state=null
                2019-01-30 17:02:14.762  INFO 18136 --- [nio-8762-exec-5] b.c.PropertySourceBootstrapConfiguration : Located property source: CompositePropertySource {name='configService', propertySources=[MapPropertySource {name='configClient'}, MapPropertySource {name='https://github.com/forezp/SpringcloudConfig/respo/config-client-dev.properties'}]}
                2019-01-30 17:02:14.764  INFO 18136 --- [nio-8762-exec-5] o.s.boot.SpringApplication               : The following profiles are active: dev

        8. 再浏览器上访问http://localhost:8762/foo 或者http://localhost:8763/foo，浏览器会显示：
            foo version 1




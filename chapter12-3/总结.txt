本Project演示构建高可用的Config Server：
    在10-1和10-2project分别讲解了Config Client 如何从配置中心Config Server 读取配置文件，配置中心如
    何从远程Git 仓库读取配置文件。当服务实例很多时，所有的服务实例需要同时从配置中心Config Server 读取
    配置文件，这时可以考虑将配置中心Config Server 做成一个微服务，并且将其集群化，从而达到高可用。
    Config Server 和Config Client 向Eureka Server 注册，且将Config Server 多实例集群部署。

一、 构建Eureka Server
        1. 在eureka-server工程pom.xml文件增加如下引用：（父POM文件自己注意查看）
                   <dependency>
                        <groupId>org.springframework.cloud</groupId>
                        <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
                    </dependency>
                    <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-web</artifactId>
                    </dependency>
        2. 在EurekaServerApplication类上新增@EnableEurekaServer注解，开启 eureka server功能。
        3. 配置application.yml文件
            server:
              port: 8761
            eureka:
              client:
                register-with-eureka: false
                fetch-registry: false
                serviceUrl:
                  defaultZone: http://localhost:${server.port}/eureka/

            #配置说明：
            #1. eureka.client.register-with-eureka: flase 和 eureka.client.fetch-registry: flase 关闭eureka-server的自注册
            #2. eureka.client.serviceUrl.defaultZone表示eureka-server的http访问地址

二、 构建Config Server
        1. 在Config-server工程pom.xml文件增加如下引用：（父POM文件自己注意查看）
                    <dependency>
            			<groupId>org.springframework.cloud</groupId>
            			<artifactId>spring-cloud-config-server</artifactId>
            		</dependency>
            		<dependency>
                        <groupId>org.springframework.cloud</groupId>
                        <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
                    </dependency>

        2. 在ConfigServerApplication类上新增@EnableConfigServer注解，开启config server功能。新增@EnableEurekaClient注解，开启
            EurekaClient功能。
        3. 配置application.yml文件
            server:
              port: 8769
            spring:
              cloud:
                config:
                  server:
                    git:
                      uri: https://github.com/forezp/SpringcloudConfig
                      searchPaths: respo
                      username:
                      password:
                  label: master
              application:
                name: config-server

            eureka:
              client:
                serviceUrl:
                  defaultZone: http://localhost:8761/eureka/

            #配置说明：
            #1. spring.cloud.config.server.git.url配置git仓库地址
            #2. spring.cloud.config.server.git.searchPaths配置搜索远程仓库的文件夹地址
            #3. spring.cloud.config.server.git.username配置git仓库的登录名
            #4. spring.cloud.config.server.git.password配置git仓库的密码 (公开的Git仓库不需要用户名、密码；私人Git仓库需要)
            #5. spring.cloud.config.label为git仓库的分支名，本例从master读取。
            #6. eureka开头的配置，用于指定eureka-server的访问URL。

        4. 重新启动config-server。

三、 构建Config client
        1.在config-client工程的pom.xml文件中新增如下引用： （父POM文件自己注意查看）
                    <dependency>
            			<groupId>org.springframework.boot</groupId>
            			<artifactId>spring-boot-starter-web</artifactId>
            		</dependency>

            		<dependency>
            			<groupId>org.springframework.cloud</groupId>
            			<artifactId>spring-cloud-starter-config</artifactId>
            		</dependency>

            		<dependency>
                        <groupId>org.springframework.cloud</groupId>
                        <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
                    </dependency>

        2.在ConfigClientApplication类新增@EnableEurekaClient注解，开启EurekaClient功能。

        2.在config-client的配置文件bootstrap.yml中做配置。【 注意： bootstrap.yml相对于appliation具有优先的执行顺序。】
            spring:
              application:
                name: config-client
              cloud:
                config:
                  fail-fast: true
                  discovery:
                    enabled: true
                    serviceId: config-server

              profiles:
                active: dev

            server:
              port: 8762

            eureka:
              client:
                serviceUrl:
                  defaultZone: http://localhost:8761/eureka/

             #配置说明：
             # spring.cloud.config.discovery.enabled: true 代表开启到eureka服务注册与发现中心查找服务
             # spring.cloud.config.discovery.enabled.serviceId: config-server 表示到eureka服务注册与发现中心查找名字为config-server的服务
             # spring.cloud.config.fail-fast 表示如果没有读取成功，则执行快速失败
             # spring.profiles.active表示读取dev环境的配置文件
             # eureka开头的配置表示访问eureka server的http 地址。

        3.在ConfigClientApplication类中写一个API接口，读取配置文件foo变量，并通过API返回。
        4.启动eureka-server，config-server工程。等config-server完全启动成功后，启动config-client工程。启动config-client工程会在控制台的日志中发现config-client向url为
          http://localhost:8769的Config Server读取了配置文件。

          日志内容如： Fetching config from server at : http://localhost:8769

        5. 访问http://localhost:8762/foo，浏览器显示：
            foo version 2

        6. 搭建高可用Config Server，就是用不同的端口启动多个Config Server实例。 Config Server实例端口分别为8769和8768。
               如何IDEA中，同一个微服务以多个端口启动的配置：
                   IDEA->Edit Configuration->Spring Boot->点击+号新增一个Spring Boot启动项目，
                   Name设置为ConfigServerApplication-8768
                   Main Classe: 设置为 com.forezp.ConfigServerApplication
                   Program arguments: --server.port=8768
                   Use classpath of module: config-server
                   JRE: Default(1.8 - SDK of 'eureka-client' module)
                   点击Apply 和 OK。

        7. 浏览器访问http://localhost:8761，可以看到Config Server一个实例有两个端口。
            CONFIG-SERVER	n/a (2)	(2)	UP (2) - localhost:config-server:8769 , localhost:config-server:8768

        8. 多次启动config-client服务，从控制台可以发现它会轮流地从http://localhost:8768 和http://localhost:8769 的Config Server读取配置文件，并且做了负载均衡。
                Fetching config from server at : http://localhost:8769/ 或者是 Fetching config from server at : http://localhost:8768/

           同时也可以关闭8769端口的config-server服务，日志会显示：
                Multiple Config Server Urls found listed.
                Fetching config from server at : http://localhost:8769/
                Connect Timeout Exception on Url - http://localhost:8769/. Will be trying the next url if available
                Fetching config from server at : http://localhost:8768/
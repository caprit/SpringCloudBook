1. 什么是JWT？
    JSON Web Token (JWT）是一种开放的标准（ RFC 7519 ), JWT 定义了一种紧凑且自包含的标准， 该标准旨在将各个主体的信息、包装为JSON 对象。主体信息是通过数字签名进行加密
    和验证的。常使用HMAC 算法或RSA （公钥／私钥的非对称性加密〉算法对JWT 进行签名， 安全性很高。下面进一步解释它的特点。
        1. 紧凑型（ compact ） ： 由于是加密后的字符串， JWT 数据体积非常小， 可通过POST请求参数或HTTP 请求头发送。另外， 数据体积小意味着传输速度很快。
        2. 自包含（ self-contained): JWT 包含了主体的所有信息，所以避免了每个请求都需要向Uaa 服务验证身份，降低了服务器的负载。

2. JWT的结构
    JWT 由3 个部分组成，分别以“．”分隔，组成部分如下。
        口Header （头）。
        口Payload （有效载荷〉。
        口Signature （签名）。
    因此， JWT 的通常格式如下：xxxxx.yyyyy.zzzzz

        下面依次来讲解这3 个组成部分。
        ( 1) Header
        Header 通常由两部分组成：令牌的类型（即JWT ）和使用的算法类型，如HMAC 、SHA256和RSA 。例如：
            {
                "alg":"HS256",
                "typ":"JWT"
            }
        将Header 用Base64 编码作为JWT 的第一部分。

        (2) Payload
        这是JWT 的第二部分，包含了用户的一些信息和Claim（声明、权利〉。有3 种类型的Claim:保留、公开和私人。一个典型的Payload 如下：
            {
                "sub":"1234567890",
                "name":"John Doe",
                "admin":true
            }
        将Payload 进行Base64 编码作为JWT 的第二部分。

        (3) Signature
        要创建签名部分，需要将Base64 编码后的Header、Payload 和秘钥进行签名， 一个典型的
        格式如下：
            HMACSHA256(
            base64Ur1Encode(header) +"."+
            base64Ur1Encode (payload),
            sec ret)

3. JWT 的应用场景
   什么时候应该使用JWT 呢？ JWT 的使用场景如下。
        A. 认证： 这是使用JWT 最常见的场景。一旦用户登录成功获取JWT 后，后续的每个请求将携带该JWT 。该JWT 包含了用户信息、权限点等信息，根据该JWT 包含的信
                  息，资源服务可以控制该JWT 可以访问的资源范围。因为JWT 的开销很小， 并且能够在不同的域中使用，单点登录是一个广泛使用JWT 的场景。
        B. 信息交换： JWT 是在各方之间安全传输信息的一种方式， 即T 使用签名加密，安全性很高。另外，当使用Header 和Payload 计算签名时，还可以验证内容是否被篡改。

4. 如何使用JWT
   认证场景使用JWT，。客户端通过提供用户名、密码向服务器请求获取JWT ，服务器判断用户名和密码正确无误之后，将用户信息和权限点经过加密以用T 的形式返回给客户端。
   在以后的每次请求中， 获取到该JWT 的客户端都需要携带该JWT ， 这样做的好处就是以后的请求都不需要通过Uaa 服务来判断该请求的用户以及该用户的权限。
   在微服务系统中，可以利用JWT 实现单点登录。
本工程演示3个功能点：
    一、如何使用Zuul代理一个或多个服务
    二、如何在Zuul上配置熔断器
    三、如何自定义实现ZuulFilter

1. 如何使用Zuul代理一个或多个服务:
    a. 在pom.xml中增加如下引用：
                <dependency>
        			<groupId>org.springframework.cloud</groupId>
        			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        		</dependency>
        		<dependency>
        			<groupId>org.springframework.cloud</groupId>
        			<artifactId>spring-cloud-starter-netflix-zuul</artifactId>
        		</dependency>
        		<dependency>
        			<groupId>org.springframework.boot</groupId>
        			<artifactId>spring-boot-starter-web</artifactId>
        		</dependency>

        		<dependency>
        			<groupId>org.springframework.boot</groupId>
        			<artifactId>spring-boot-starter-test</artifactId>
        			<scope>test</scope>
        		</dependency>
     b. 在EurekaZuulClientApplication类上配置@SpringBootApplication @EnableZuulProxy @EnableEurekaClient注解，开启spring boot，zuul proxy, eureka-client功能。
     c. 在application.yml中新增如下配置：
                eureka:
                  client:
                    serviceUrl:
                      defaultZone: http://localhost:8761/eureka/
                server:
                  port: 5000
                spring:
                  application:
                    name: service-zuul

                #################################################################################################################
                # 以下配置重点介绍zuul路由的配置写法， 有两种方法，具体介绍见下面说明。 方法一和方法二不能同时使用，实际项目使用不推荐第二种方法。
                #################################################################################################################
                # 第一种方法： 将URL转发到指定的serviceId服务，通过指定serviceId=服务名称即可。
                # path 与 servcieId 这两个配置就可以将以"/hiapi"开头的url路由到eureka-client服务。其中zuul.routes.hiapi中的hiapi是自己
                # 定义的，需要制定他的path和serviceId。
                # 同理，url以"/ribbonapi"的请求URL会被分发到eureka-ribbon-client服务。
                # url以"/feignapi"的请求URL会被分发到eureka-feign-client服务。
                # 默认zuul已经结合Ribbon做了负载均衡，会将请求均分的部分路由到不同的服务示例。
                # 其中hiapi, ribbonapi,feignapi 这三个名字可以自己随便定义，只要唯一就行。
                zuul:
                  routes:
                    hiapi:
                      path: /hiapi/**
                      serviceId: eureka-client
                    ribbonapi:
                      path: /ribbonapi/**
                      serviceId: eureka-ribbon-client
                    feignapi:
                      path: /feignapi/**
                      serviceId: eureka-feign-client
                  #prefix: /v1  #如果想给每一个服务的API接口加个前缀，就需要配置zuul.prefix配置。 配置之后，访问路径变成/v1/hiapi/**

                # 第二种方式： 将URL转发到指定的集群地址，通过指定listOfServers=URL1,URL2即可。【此方式 实际项目中不推荐使用】
                # 以下配置演示指定URL，并且想做负载均衡。这个时候就需要自己维护负载均衡的服务注册列表
                # 首先将ribbon.eureka.enabled设置为false 这样ribbon就不会向客户端Eureka Client获取服务注册列表
                # 需要自己维护一份注册列表，listOfServers 来配置多个负载均衡的Url
                #zuul:
                #  routes:
                #    hiapi:
                #      path: /hiapi/**

                #ribbon:
                # eureka:
                #    enabled: false
                # listOfServers: http://localhost:8762,http://localhost:8763

    d. 依次启动工程eureka-server,eureka-client(这个工程要启动两个端口8762和8763)、eureka-ribbon-client,eureka-feign-client和eureka-zuul-client。
    e. 在浏览器上多次访问http://localhost:5000/hiapi/hi?name=forezp ，浏览器会交替显示以下内容：
            hi forezp,i am from port:8762
            hi forezp,i am from port:8763   (由此可以见，zuul已经默认集成了Ribbon实现了负载均衡)
       同理多次访问http://localhost:5000/ribbonapi/hi?name=forezp和http://localhost:5000/feignapi/hi?name=forezp，也可以可看到相似的内容。

    f. 如果想给卖给一个服务的API接口加前缀，比如给所有的API接口地址上加V1作为版本号，只要配置zuul.prefix配置就可以。
       示例见application.yml配置第一种方法中 zuul.prefix配置。增加此配置后，重启服务。
       访问URL更改为： 例如http://localhost:5000/v1/hiapi/hi?name=forezp

2. 如何在Zuul上配置熔断器：
    Zuul 作为Netflix 组件，可以与Ribbon 、Eureka 和Hystrix 等组件相结合，实现负载均衡、熔断器的功能。在默认情况下， Zuul 和Ribbon 相结合， 实现了负载均衡的功能。
    在Zuul 中实现熔断功能需要实现FallbackProvider 的接口,实现该接口有两个方法， 一个是getRouteO方法，用于指定熔断功能应用于哪些路由的服务；
    另一个方法fallbackResponse()为进入熔断功能时执行的逻辑。

    在Zuul配置熔断器步骤：
        a. 前提条件： 使用Zuul代理一个或多个服务功能都可以正常运行。
        b. 定义MyFallbackProvider类实现FallbackProvider接口，增加@Component注解将此类注入到IOC容器中。 【具体的代码注释说明请见MyFallbackProvider类】
        c. 启动eureka-server，重启eureka-zuul-client,关闭eureka-client的所有实例。
        d. 在浏览器访问http://localhost:5000/hiapi/hi?name=forezp ，浏览器提示：
            oooops!error, i'm the fallback.

3. 如何自定义实现ZuulFilter:
    自定义过滤器只需要继承ZuulFilter ，井实现ZuulFilter 中的抽象方法，包括filterType()和filterOrder（），以及IZuulFilter 的shouldFilter（）和run（）的两个方法。
    filterType()即过滤器的类型，有4 种类型，分别是"pre" "post" "routing" 和 "error";
    filterOrder（）是过滤顺序，它为一个Int 类型的值，值越小，越早执行该过滤器;
    shouldFilter（）表示该过滤器是否过滤逻辑，如果为true ，则执行run（）方法：如果为false ，则不执行run （）方法；
    run （）方法写具体的过滤的逻辑。

    在Zuul中实现ZuulFilter步骤：
        a. 前提条件： 使用Zuul代理一个或多个服务功能都可以正常运行。
        b. 定义MyFilter类继承ZuulFilter类，增加@Component注解将此类注入到IOC容器中。
        c. 确保eureka-server,eureka-zuul-clinet,eureka-client服务已经启动。项目如果改动了代码，就要重启对应的服务。
        d. 打开浏览器访问： http://localhost:5000/hiapi/hi?name=forezp 浏览器显示： token is empty
        e. 浏览器访问： http://localhost:5000/hiapi/hi?name=forezp&token=123456 ，浏览器显示： hi forezp,i am from port:8762

    ZuulFilter使用场景总结：
        在实际开发中，可以用此过滤器进行安全验证，日志统一记录等。

        Zuul 是采用了类似于Spring MVC 的DispatchServlet 来实现的，采用的是异步阻塞模型，所以性能比Ngnix 差。由于Zuul 和其他Netflix 组件可以相互配合、无缝集成，
        Zuul 很容易就能实现负载均衡、智能路由和熔断器等功能。在大多数情况下， Zuul 都是以集群的形式存在的。由于Zuul的横向扩展能力非常好，所以当负载过高时，可以
        通过添加实例来解决性能瓶颈。

        一种常见的使用方式是对不同的渠道使用不同的Zuul 来进行路由，例如移动端共用一个Zuul 网关实例， Web 端用另一个Zuul 网关实例，其他的客户端用另外一个Zuul 实例进行路由。

        另外一种常见的集群是通过Ngnix 和Zuul 相互结合来做负载均衡。暴露在最外面的是Ngnix 主从双热备进行Keepalive, Ngnix 经过某种路由策略，将请求路由转发到Zuul 集群上，
        Zuul 最终将请求分发到具体的服务上。
